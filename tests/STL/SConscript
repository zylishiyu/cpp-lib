import os

base_dir = '.'
lib_dir = base_dir + '/lib'
inc_dir = base_dir + '/include'

# Add C++ Preprocessor
env = Environment(CPPFLAGS='-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.0.0.0\\\" -DDEBUG')

# Add C compile-time flags
env.Append(CCFLAGS='-g -pipe -W -Wall')

#env.Append(CXXFLAGS='-g -pipe -W -Wall')

# Add header search path
#env.Append(CPPPATH = [inc_dir])

# Add library search path
#env.Append(LIBPATH = [lib_dir])

# Add libraries to link against
#env.Append(LIBS = ['static'])

# Add define
#env.Append(CPPDEFINES=['BIG_ENDIAN'])
# add define with value (e.g. -DRELEASE_BUILD=1)
#env.Append(CPPDEFINES={'RELEASE_BUILD' : '1'})

# Link time flags
#env.Append(LINKFLAGS = ['-lpthread -lcrypto -lrt'])

for file in os.listdir(os.getcwd()) :
    if os.path.isfile(os.path.join(os.getcwd(), file)) and file.endswith(".cpp") :
        bin_file = file[:file.rfind(".cpp")]
        t = env.Program(target = bin_file, source = file)
        Default(t)

