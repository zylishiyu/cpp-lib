import os

base_dir = "../../../output"
lib_dir = base_dir + '/lib'
inc_dir = base_dir + '/include'

# Add C++ Preprocessor
env = Environment(CPPFLAGS='-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -DVERSION=\\\"1.0.0.0\\\" -DDEBUG')

# Add C compile-time flags
env.Append(CCFLAGS='-g -pipe -W -Wall')

#env.Append(CXXFLAGS='-g -pipe -W -Wall')

# Add header search path
env.Append(CPPPATH = [inc_dir])

# Add library search path
env.Append(LIBPATH = [lib_dir])

# Add libraries to link against
env.Append(LIBS = ['zthread', 'zutils'])

# Add define
#env.Append(CPPDEFINES=['BIG_ENDIAN'])
# add define with value (e.g. -DRELEASE_BUILD=1)
#env.Append(CPPDEFINES={'RELEASE_BUILD' : '1'})

# Link time flags
env.Append(LINKFLAGS = ['-lpthread'])

Default(env.Program(target = 'alarm_thread_test', source = 'alarm_thread_test.cpp'))
Default(env.Program(target = 'sigaction_test', source = 'sigaction_test.cpp'))
Default(env.Program(target = 'signal_ipc_test', source = 'signal_ipc_test.cpp'))
Default(env.Program(target = 'thr_alarm_test', source = 'thr_alarm_test.cpp'))
Default(env.Program(target = 'ualarm_test', source = 'ualarm_test.cpp'))


#for file in os.listdir(os.getcwd()) :
#    if os.path.isfile(os.path.join(os.getcwd(), file)) and file.find(".c") != -1:
#        bin_file = file[:file.rfind(".c")]
#        t = env.Program(target = bin_file, source = file)
#        Default(t)

